#!/usr/bin/python
#
# 2012 patrick.atamaniuk@wibas.de
# requires python2.7
# requires pika, gitpython
# get .travis.yml: git show HEAD~4:index.html > local_file

import sys,os,re
import time
import simplejson
import pika
from git import Repo

THIS_REPO='example_repo'
RABBITMQ_SERVER='localhost'
RABBITMQ_QUEUE='myownci.git.commit'
PROJECT_CONFIGFILE='.travis.yml'

zero = re.compile(r'^0{40}')

class ConfigurationError(Exception): pass

class Gitaccess:
    def __init__(self):
        self.repo = Repo.init(".", bare=True)

    def get_config(self):
        self.reader = self.repo.config_reader()
# may raise ConfigParser.NoSectionError ConfigParser.NoOptionError 
        return {
          'hub_addr': self.reader.get('myownci', 'hub-addr'),
          'repository_id': self.reader.get('myownci', 'repository-id'),
          'project_configfile': self.reader.get('myownci', 'project-configfile')
        }

    def get_commitinfo(self, hexsha):
        tree = self.repo.tree(hexsha)
        try:
            project_configfile = tree[PROJECT_CONFIGFILE]
            buildconfig = project_configfile.data_stream.read()
        except KeyError: #file not found in repo
            raise ConfigurationError

        commit = self.repo.commit(hexsha)
        return {
            'commit': hexsha,
            'author': {'name':commit.author.name, 'email':commit.author.email},
            'committer': {'name':commit.committer.name, 'email':commit.committer.email},
            'committed_date': commit.committed_date,
            'commitmessage': commit.message,
            'buildconfig': buildconfig
        }

class Amqpadapter:
    def __init__(self):
        self.g = Gitaccess()
        self.config = self.g.get_config()

    def send(self, commit, extradata = None):
        payload = self.g.get_commitinfo(commit)
        if extradata:
          payload.update(extradata)

        connection = pika.BlockingConnection(pika.ConnectionParameters(
            host = RABBITMQ_SERVER))
        channel = connection.channel()

        channel.queue_declare(queue=RABBITMQ_QUEUE, durable=True)

        channel.basic_publish(exchange = '',
                      routing_key = RABBITMQ_QUEUE,
                      body = simplejson.dumps(payload),
                      properties = pika.BasicProperties(
                        app_id = 'myownci.git.hooks.post-receive',
                        content_type = 'application/json',
                        timestamp = time.time(),
                        delivery_mode = 2, # make message persistent
                        headers = {}
                     ))
        connection.close()
        print " [x] Notified CI."

def main():
    old = ''
    new = ''
    for line in sys.stdin.readlines():
        (old, new, ref) = line.strip().split(" ")[:3]
        if zero.match(new): continue 
        if old == new: continue
    if new:
        Amqpadapter().send(new, { 'ref': ref, })

if __name__ == '__main__':
    main()
sys.exit(0)
